<#@ assembly name="System.DirectoryServices.AccountManagement" #>
<#@ import namespace="System.DirectoryServices.AccountManagement" #>
<#
//// VERSION CONFIGURATION /////////////////////////////////////////////////////

uint major = 1;
uint minor = 0;
uint patch = 1;

string preReleaseStage = "";
uint   preReleaseLevel = 0;

string build        = Environment.GetEnvironmentVariable("BUILD_NUMBER") ?? "0";
string revision     = Environment.GetEnvironmentVariable("REVISION_NUMBER") ?? "0";
string specialBuild = Environment.GetEnvironmentVariable("SPECIAL_BUILD");

string user    = "";
string machine = "";

if (build == "0" || revision == "0")
{
    user     = Environment.UserName;
    machine  = Environment.MachineName;
}

////////////////////////////////////////////////////////////////////////////////
#>
<#
IEnumerable<object> preRelease = from identifier in new object[] { preReleaseStage, preReleaseLevel }
                                 where identifier != null
                                    && (identifier is string && (string)identifier != ""
                                     || identifier is uint && (uint)identifier > 0)
                                 select identifier;

IEnumerable<object> buildMetaData;

if (build == "0" || revision == "0")
{
    buildMetaData = new object[] { user, machine, Environment.OSVersion.Platform, specialBuild };
}
else
{
    buildMetaData = new object[] { build, revision, Environment.OSVersion.Platform, specialBuild };
}

buildMetaData = from identifier in buildMetaData
                where identifier != null
                   && (!(identifier is string) || (string)identifier != "" && (string)identifier != "0")
                select identifier;

string productVersion = $"{major}.{minor}.{patch}"
                      + (preRelease.Any() ? $"-{string.Join(".", preRelease)}" : "")
                      + $"+{string.Join(".", buildMetaData)}";

preRelease = from identifier in preRelease
             select identifier is string ? $@"""{identifier}""" : (identifier.GetType().IsEnum ? $"{identifier.GetType().FullName}.{identifier}" : identifier);
buildMetaData = from identifier in buildMetaData
                select identifier is string ? $@"""{identifier}""": (identifier.GetType().IsEnum ? $"{identifier.GetType().FullName}.{identifier}" : identifier);
#>